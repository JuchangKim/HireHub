{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\Music\\\\HireHub\\\\client\\\\src\\\\pages\\\\LeisurePage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Button, Alert } from \"react-bootstrap\";\n\n// Tic Tac Toe Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicTacToe = ({\n  onGameEnd\n}) => {\n  _s();\n  const initialBoard = Array(9).fill(null);\n  const [board, setBoard] = useState(initialBoard);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [userTurn, setUserTurn] = useState(true);\n  const checkWinner = squares => {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let line of lines) {\n      const [a, b, c] = line;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return squares.every(square => square) ? \"Draw\" : null;\n  };\n  const handleUserMove = index => {\n    if (board[index] || isGameOver || !userTurn) return;\n    const newBoard = [...board];\n    newBoard[index] = \"X\";\n    setBoard(newBoard);\n    const result = checkWinner(newBoard);\n    if (result) {\n      setWinner(result);\n      setIsGameOver(true);\n      onGameEnd(result); // Notify parent component of game end\n      return;\n    }\n    setUserTurn(false);\n    computerMove(newBoard);\n  };\n  const computerMove = newBoard => {\n    const availableMoves = newBoard.map((val, index) => val === null ? index : null).filter(val => val !== null);\n    if (availableMoves.length > 0) {\n      const randomIndex = Math.floor(Math.random() * availableMoves.length);\n      newBoard[availableMoves[randomIndex]] = \"O\";\n      setBoard(newBoard);\n      const result = checkWinner(newBoard);\n      if (result) {\n        setWinner(result);\n        setIsGameOver(true);\n        onGameEnd(result); // Notify parent component of game end\n      }\n    }\n    setUserTurn(true);\n  };\n  const resetGame = () => {\n    setBoard(initialBoard);\n    setIsGameOver(false);\n    setWinner(null);\n    setUserTurn(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tic Tac Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: winner === \"Draw\" ? \"warning\" : \"success\",\n      children: winner === \"Draw\" ? \"It's a Draw!\" : `Winner: ${winner}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), !isGameOver && userTurn && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"info\",\n      children: \"Your Turn!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: Array.from({\n        length: 3\n      }, (_, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginBottom: \"5px\"\n        },\n        children: board.slice(rowIndex * 3, rowIndex * 3 + 3).map((square, index) => /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-primary\",\n          style: {\n            width: \"100px\",\n            height: \"100px\",\n            fontSize: \"36px\",\n            margin: \"5px\"\n          },\n          onClick: () => handleUserMove(rowIndex * 3 + index),\n          children: square\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"w-100\",\n      onClick: resetGame,\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n// Snake Game Component\n_s(TicTacToe, \"amZLAizzIZm8vtH3h2dHkGhgaGU=\");\n_c = TicTacToe;\nconst SnakeGame = () => {\n  _s2();\n  const [snake, setSnake] = useState([[0, 0]]);\n  const [food, setFood] = useState([5, 5]);\n  const [direction, setDirection] = useState(\"RIGHT\");\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      switch (e.key) {\n        case \"ArrowUp\":\n          setDirection(\"UP\");\n          break;\n        case \"ArrowDown\":\n          setDirection(\"DOWN\");\n          break;\n        case \"ArrowLeft\":\n          setDirection(\"LEFT\");\n          break;\n        case \"ArrowRight\":\n          setDirection(\"RIGHT\");\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    const gameInterval = setInterval(moveSnake, 200);\n    return () => {\n      clearInterval(gameInterval);\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [snake, direction]);\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = newSnake[0];\n    let newHead;\n    switch (direction) {\n      case \"UP\":\n        newHead = [head[0] - 1, head[1]];\n        break;\n      case \"DOWN\":\n        newHead = [head[0] + 1, head[1]];\n        break;\n      case \"LEFT\":\n        newHead = [head[0], head[1] - 1];\n        break;\n      case \"RIGHT\":\n        newHead = [head[0], head[1] + 1];\n        break;\n      default:\n        newHead = head;\n    }\n    if (checkCollision(newHead)) {\n      setGameOver(true);\n      return;\n    }\n    newSnake.unshift(newHead); // Add new head\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\n      setFood(generateFood(newSnake)); // Generate new food\n    } else {\n      newSnake.pop(); // Remove last segment\n    }\n    setSnake(newSnake);\n  };\n  const checkCollision = head => {\n    const [x, y] = head;\n    // Check wall collision\n    if (x < 0 || x >= 10 || y < 0 || y >= 10) return true;\n    // Check self collision\n    for (let segment of snake) {\n      if (segment[0] === x && segment[1] === y) return true;\n    }\n    return false;\n  };\n  const generateFood = snake => {\n    let newFood;\n    do {\n      newFood = [Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)];\n    } while (snake.some(segment => segment[0] === newFood[0] && segment[1] === newFood[1]));\n    return newFood;\n  };\n  const resetGame = () => {\n    setSnake([[0, 0]]);\n    setFood([5, 5]);\n    setDirection(\"RIGHT\");\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: \"Game Over! Try Again.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(10, 40px)\",\n        margin: \"20px auto\"\n      },\n      children: Array.from({\n        length: 100\n      }, (_, index) => {\n        const x = Math.floor(index / 10);\n        const y = index % 10;\n        const isSnake = snake.some(segment => segment[0] === x && segment[1] === y);\n        const isFood = food[0] === x && food[1] === y;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"40px\",\n            height: \"40px\",\n            backgroundColor: isSnake ? \"green\" : isFood ? \"red\" : \"lightgray\",\n            border: \"1px solid black\"\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: resetGame,\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n\n// Main Leisure Component\n_s2(SnakeGame, \"egXEGEVOIieh9cmojWj6mwz/YW8=\");\n_c2 = SnakeGame;\nconst LeisurePage = () => {\n  _s3();\n  const [activeGame, setActiveGame] = useState(\"TicTacToe\");\n  const [gameResult, setGameResult] = useState(null);\n  const handleGameEnd = result => {\n    setGameResult(result);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 8,\n        lg: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center mb-4\",\n          children: \"Leisure Games\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), gameResult && /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"info\",\n          children: gameResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => {\n            setActiveGame(\"TicTacToe\");\n            setGameResult(null); // Reset game result when switching games\n          },\n          children: \"Tic Tac Toe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => {\n            setActiveGame(\"Snake\");\n            setGameResult(null); // Reset game result when switching games\n          },\n          children: \"Snake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [activeGame === \"TicTacToe\" && /*#__PURE__*/_jsxDEV(TicTacToe, {\n            onGameEnd: handleGameEnd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this), activeGame === \"Snake\" && /*#__PURE__*/_jsxDEV(SnakeGame, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s3(LeisurePage, \"oSuLwfYRknIm0JA7UzfuGyDKKW0=\");\n_c3 = LeisurePage;\nexport default LeisurePage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TicTacToe\");\n$RefreshReg$(_c2, \"SnakeGame\");\n$RefreshReg$(_c3, \"LeisurePage\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Button","Alert","jsxDEV","_jsxDEV","TicTacToe","onGameEnd","_s","initialBoard","Array","fill","board","setBoard","isGameOver","setIsGameOver","winner","setWinner","userTurn","setUserTurn","checkWinner","squares","lines","line","a","b","c","every","square","handleUserMove","index","newBoard","result","computerMove","availableMoves","map","val","filter","length","randomIndex","Math","floor","random","resetGame","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","style","display","flexDirection","alignItems","from","_","rowIndex","justifyContent","marginBottom","slice","width","height","fontSize","margin","onClick","className","_c","SnakeGame","_s2","snake","setSnake","food","setFood","direction","setDirection","gameOver","setGameOver","handleKeyDown","e","key","document","addEventListener","gameInterval","setInterval","moveSnake","clearInterval","removeEventListener","newSnake","head","newHead","checkCollision","unshift","generateFood","pop","x","y","segment","newFood","some","gridTemplateColumns","isSnake","isFood","backgroundColor","border","_c2","LeisurePage","_s3","activeGame","setActiveGame","gameResult","setGameResult","handleGameEnd","xs","md","lg","_c3","$RefreshReg$"],"sources":["C:/Users/aksha/Music/HireHub/client/src/pages/LeisurePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col, Button, Alert } from \"react-bootstrap\";\r\n\r\n// Tic Tac Toe Component\r\nconst TicTacToe = ({ onGameEnd }) => {\r\n  const initialBoard = Array(9).fill(null);\r\n  const [board, setBoard] = useState(initialBoard);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [winner, setWinner] = useState(null);\r\n  const [userTurn, setUserTurn] = useState(true);\r\n\r\n  const checkWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (let line of lines) {\r\n      const [a, b, c] = line;\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return squares[a];\r\n      }\r\n    }\r\n\r\n    return squares.every((square) => square) ? \"Draw\" : null;\r\n  };\r\n\r\n  const handleUserMove = (index) => {\r\n    if (board[index] || isGameOver || !userTurn) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[index] = \"X\";\r\n    setBoard(newBoard);\r\n    const result = checkWinner(newBoard);\r\n\r\n    if (result) {\r\n      setWinner(result);\r\n      setIsGameOver(true);\r\n      onGameEnd(result); // Notify parent component of game end\r\n      return;\r\n    }\r\n\r\n    setUserTurn(false);\r\n    computerMove(newBoard);\r\n  };\r\n\r\n  const computerMove = (newBoard) => {\r\n    const availableMoves = newBoard\r\n      .map((val, index) => (val === null ? index : null))\r\n      .filter((val) => val !== null);\r\n    if (availableMoves.length > 0) {\r\n      const randomIndex = Math.floor(Math.random() * availableMoves.length);\r\n      newBoard[availableMoves[randomIndex]] = \"O\";\r\n      setBoard(newBoard);\r\n      const result = checkWinner(newBoard);\r\n\r\n      if (result) {\r\n        setWinner(result);\r\n        setIsGameOver(true);\r\n        onGameEnd(result); // Notify parent component of game end\r\n      }\r\n    }\r\n    setUserTurn(true);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBoard(initialBoard);\r\n    setIsGameOver(false);\r\n    setWinner(null);\r\n    setUserTurn(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Tic Tac Toe</h2>\r\n      {winner && (\r\n        <Alert variant={winner === \"Draw\" ? \"warning\" : \"success\"}>\r\n          {winner === \"Draw\" ? \"It's a Draw!\" : `Winner: ${winner}`}\r\n        </Alert>\r\n      )}\r\n      {!isGameOver && userTurn && <Alert variant=\"info\">Your Turn!</Alert>}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {Array.from({ length: 3 }, (_, rowIndex) => (\r\n          <div\r\n            key={rowIndex}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            {board\r\n              .slice(rowIndex * 3, rowIndex * 3 + 3)\r\n              .map((square, index) => (\r\n                <Button\r\n                  key={index}\r\n                  variant=\"outline-primary\"\r\n                  style={{\r\n                    width: \"100px\",\r\n                    height: \"100px\",\r\n                    fontSize: \"36px\",\r\n                    margin: \"5px\",\r\n                  }}\r\n                  onClick={() => handleUserMove(rowIndex * 3 + index)}\r\n                >\r\n                  {square}\r\n                </Button>\r\n              ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Button variant=\"primary\" className=\"w-100\" onClick={resetGame}>\r\n        Restart Game\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Snake Game Component\r\nconst SnakeGame = () => {\r\n  const [snake, setSnake] = useState([[0, 0]]);\r\n  const [food, setFood] = useState([5, 5]);\r\n  const [direction, setDirection] = useState(\"RIGHT\");\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      switch (e.key) {\r\n        case \"ArrowUp\":\r\n          setDirection(\"UP\");\r\n          break;\r\n        case \"ArrowDown\":\r\n          setDirection(\"DOWN\");\r\n          break;\r\n        case \"ArrowLeft\":\r\n          setDirection(\"LEFT\");\r\n          break;\r\n        case \"ArrowRight\":\r\n          setDirection(\"RIGHT\");\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyDown);\r\n    const gameInterval = setInterval(moveSnake, 200);\r\n\r\n    return () => {\r\n      clearInterval(gameInterval);\r\n      document.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [snake, direction]);\r\n\r\n  const moveSnake = () => {\r\n    const newSnake = [...snake];\r\n    const head = newSnake[0];\r\n    let newHead;\r\n\r\n    switch (direction) {\r\n      case \"UP\":\r\n        newHead = [head[0] - 1, head[1]];\r\n        break;\r\n      case \"DOWN\":\r\n        newHead = [head[0] + 1, head[1]];\r\n        break;\r\n      case \"LEFT\":\r\n        newHead = [head[0], head[1] - 1];\r\n        break;\r\n      case \"RIGHT\":\r\n        newHead = [head[0], head[1] + 1];\r\n        break;\r\n      default:\r\n        newHead = head;\r\n    }\r\n\r\n    if (checkCollision(newHead)) {\r\n      setGameOver(true);\r\n      return;\r\n    }\r\n\r\n    newSnake.unshift(newHead); // Add new head\r\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\r\n      setFood(generateFood(newSnake)); // Generate new food\r\n    } else {\r\n      newSnake.pop(); // Remove last segment\r\n    }\r\n\r\n    setSnake(newSnake);\r\n  };\r\n\r\n  const checkCollision = (head) => {\r\n    const [x, y] = head;\r\n    // Check wall collision\r\n    if (x < 0 || x >= 10 || y < 0 || y >= 10) return true;\r\n    // Check self collision\r\n    for (let segment of snake) {\r\n      if (segment[0] === x && segment[1] === y) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const generateFood = (snake) => {\r\n    let newFood;\r\n    do {\r\n      newFood = [\r\n        Math.floor(Math.random() * 10),\r\n        Math.floor(Math.random() * 10),\r\n      ];\r\n    } while (\r\n      snake.some(\r\n        (segment) => segment[0] === newFood[0] && segment[1] === newFood[1]\r\n      )\r\n    );\r\n    return newFood;\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setSnake([[0, 0]]);\r\n    setFood([5, 5]);\r\n    setDirection(\"RIGHT\");\r\n    setGameOver(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Snake Game</h2>\r\n      {gameOver && <Alert variant=\"danger\">Game Over! Try Again.</Alert>}\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(10, 40px)\",\r\n          margin: \"20px auto\",\r\n        }}\r\n      >\r\n        {Array.from({ length: 100 }, (_, index) => {\r\n          const x = Math.floor(index / 10);\r\n          const y = index % 10;\r\n          const isSnake = snake.some(\r\n            (segment) => segment[0] === x && segment[1] === y\r\n          );\r\n          const isFood = food[0] === x && food[1] === y;\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n                backgroundColor: isSnake\r\n                  ? \"green\"\r\n                  : isFood\r\n                  ? \"red\"\r\n                  : \"lightgray\",\r\n                border: \"1px solid black\",\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <Button variant=\"primary\" onClick={resetGame}>\r\n        Restart Game\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main Leisure Component\r\nconst LeisurePage = () => {\r\n  const [activeGame, setActiveGame] = useState(\"TicTacToe\");\r\n  const [gameResult, setGameResult] = useState(null);\r\n\r\n  const handleGameEnd = (result) => {\r\n    setGameResult(result);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <Row className=\"justify-content-center\">\r\n        <Col xs={12} md={8} lg={6}>\r\n          <h1 className=\"text-center mb-4\">Leisure Games</h1>\r\n          {gameResult && <Alert variant=\"info\">{gameResult}</Alert>}\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => {\r\n              setActiveGame(\"TicTacToe\");\r\n              setGameResult(null); // Reset game result when switching games\r\n            }}\r\n          >\r\n            Tic Tac Toe\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => {\r\n              setActiveGame(\"Snake\");\r\n              setGameResult(null); // Reset game result when switching games\r\n            }}\r\n          >\r\n            Snake\r\n          </Button>\r\n          <div className=\"mt-4\">\r\n            {activeGame === \"TicTacToe\" && (\r\n              <TicTacToe onGameEnd={handleGameEnd} />\r\n            )}\r\n            {activeGame === \"Snake\" && <SnakeGame />}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LeisurePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}