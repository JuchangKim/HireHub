{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\B4NKRUPT\\\\Desktop\\\\Studies\\\\sdp\\\\HireHub\\\\HireHub\\\\client\\\\src\\\\pages\\\\SalaryEstimator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Form, Button, Card } from 'react-bootstrap';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SalaryEstimator() {\n  _s();\n  const [roles, setRoles] = useState([]);\n  const [industries, setIndustries] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [experience, setExperience] = useState('');\n  const [selectedRole, setSelectedRole] = useState('');\n  const [selectedIndustry, setSelectedIndustry] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState('');\n  const [salaryEstimate, setSalaryEstimate] = useState(null);\n\n  // Fetch roles, industries, and locations\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        const rolesResponse = await axios.get('http://localhost:5000/api/salary/roles');\n        const industriesResponse = await axios.get('http://localhost:5000/api/salary/industries');\n        const locationsResponse = await axios.get('http://localhost:5000/api/salary/locations');\n        setRoles(rolesResponse.data);\n        setIndustries(industriesResponse.data);\n        setLocations(locationsResponse.data);\n      } catch (error) {\n        console.error('Error fetching options:', error);\n      }\n    };\n    fetchOptions();\n  }, []);\n  const handleEstimateSalary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/salary/estimate', {\n        params: {\n          role: selectedRole,\n          industry: selectedIndustry,\n          location: selectedLocation,\n          experience: experience\n        }\n      });\n      setSalaryEstimate(response.data);\n    } catch (error) {\n      console.error('Error estimating salary:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"p-4\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formRole\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              value: selectedRole,\n              onChange: e => setSelectedRole(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select role\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 33\n              }, this), roles.map(role => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: role,\n                children: role\n              }, role, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formIndustry\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Industry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              value: selectedIndustry,\n              onChange: e => setSelectedIndustry(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select industry\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this), industries.map(industry => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: industry,\n                children: industry\n              }, industry, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formLocation\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              value: selectedLocation,\n              onChange: e => setSelectedLocation(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 33\n              }, this), locations.map(location => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: location,\n                children: location\n              }, location, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formExperience\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Experience (years)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              value: experience,\n              onChange: e => setExperience(e.target.value),\n              min: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleEstimateSalary,\n            children: \"Estimate Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        md: 6,\n        children: salaryEstimate && /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mt-4\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: \"Salary Estimate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Minimum Salary:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 37\n              }, this), \" $\", salaryEstimate.minSalary, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 97\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Maximum Salary:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this), \" $\", salaryEstimate.maxSalary]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(SalaryEstimator, \"7ItcodnK5jJSfYpD+KIzt7aihl4=\");\n_c = SalaryEstimator;\nexport default SalaryEstimator;\nvar _c;\n$RefreshReg$(_c, \"SalaryEstimator\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Form","Button","Card","axios","jsxDEV","_jsxDEV","SalaryEstimator","_s","roles","setRoles","industries","setIndustries","locations","setLocations","experience","setExperience","selectedRole","setSelectedRole","selectedIndustry","setSelectedIndustry","selectedLocation","setSelectedLocation","salaryEstimate","setSalaryEstimate","fetchOptions","rolesResponse","get","industriesResponse","locationsResponse","data","error","console","handleEstimateSalary","response","params","role","industry","location","fluid","className","children","xs","md","Group","controlId","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","as","value","onChange","e","target","map","type","min","variant","onClick","Body","Title","Text","minSalary","maxSalary","_c","$RefreshReg$"],"sources":["C:/Users/B4NKRUPT/Desktop/Studies/sdp/HireHub/HireHub/client/src/pages/SalaryEstimator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Form, Button, Card } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nfunction SalaryEstimator() {\r\n    const [roles, setRoles] = useState([]);\r\n    const [industries, setIndustries] = useState([]);\r\n    const [locations, setLocations] = useState([]);\r\n    const [experience, setExperience] = useState('');\r\n    const [selectedRole, setSelectedRole] = useState('');\r\n    const [selectedIndustry, setSelectedIndustry] = useState('');\r\n    const [selectedLocation, setSelectedLocation] = useState('');\r\n    const [salaryEstimate, setSalaryEstimate] = useState(null);\r\n\r\n    // Fetch roles, industries, and locations\r\n    useEffect(() => {\r\n        const fetchOptions = async () => {\r\n            try {\r\n                const rolesResponse = await axios.get('http://localhost:5000/api/salary/roles');\r\n                const industriesResponse = await axios.get('http://localhost:5000/api/salary/industries');\r\n                const locationsResponse = await axios.get('http://localhost:5000/api/salary/locations');\r\n                setRoles(rolesResponse.data);\r\n                setIndustries(industriesResponse.data);\r\n                setLocations(locationsResponse.data);\r\n            } catch (error) {\r\n                console.error('Error fetching options:', error);\r\n            }\r\n        };\r\n\r\n        fetchOptions();\r\n    }, []);\r\n\r\n    const handleEstimateSalary = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/api/salary/estimate', {\r\n                params: {\r\n                    role: selectedRole,\r\n                    industry: selectedIndustry,\r\n                    location: selectedLocation,\r\n                    experience: experience,\r\n                },\r\n            });\r\n            setSalaryEstimate(response.data);\r\n        } catch (error) {\r\n            console.error('Error estimating salary:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container fluid className=\"p-4\">\r\n            <Row>\r\n                <Col xs={12} md={6} className=\"mb-4\">\r\n                    <Form>\r\n                        <Form.Group controlId=\"formRole\">\r\n                            <Form.Label>Role</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                value={selectedRole}\r\n                                onChange={(e) => setSelectedRole(e.target.value)}\r\n                            >\r\n                                <option value=\"\">Select role</option>\r\n                                {roles.map((role) => (\r\n                                    <option key={role} value={role}>{role}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formIndustry\">\r\n                            <Form.Label>Industry</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                value={selectedIndustry}\r\n                                onChange={(e) => setSelectedIndustry(e.target.value)}\r\n                            >\r\n                                <option value=\"\">Select industry</option>\r\n                                {industries.map((industry) => (\r\n                                    <option key={industry} value={industry}>{industry}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formLocation\">\r\n                            <Form.Label>Location</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                value={selectedLocation}\r\n                                onChange={(e) => setSelectedLocation(e.target.value)}\r\n                            >\r\n                                <option value=\"\">Select location</option>\r\n                                {locations.map((location) => (\r\n                                    <option key={location} value={location}>{location}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formExperience\">\r\n                            <Form.Label>Experience (years)</Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                value={experience}\r\n                                onChange={(e) => setExperience(e.target.value)}\r\n                                min=\"0\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" onClick={handleEstimateSalary}>\r\n                            Estimate Salary\r\n                        </Button>\r\n                    </Form>\r\n                </Col>\r\n                <Col xs={12} md={6}>\r\n                    {salaryEstimate && (\r\n                        <Card className=\"mt-4\">\r\n                            <Card.Body>\r\n                                <Card.Title>Salary Estimate</Card.Title>\r\n                                <Card.Text>\r\n                                    <strong>Minimum Salary:</strong> ${salaryEstimate.minSalary}<br />\r\n                                    <strong>Maximum Salary:</strong> ${salaryEstimate.maxSalary}\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default SalaryEstimator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}